[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{cookiecutter.package_name}}"
dynamic = ["version"]
requires-python = ">= 3.11"
dependencies = []
authors = [
  {name = "{{cookiecutter.full_name}}", email = "{{cookiecutter.email}}"},
]
keywords=[
  "{{cookiecutter.package_name}}"
]
description = "{{cookiecutter.package_short_description}}"
readme = "README.rst"
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
{%- if cookiecutter.license == "Not licensed for distribution (no license)" %}
  "License :: Other/Proprietary License",
{%- elif cookiecutter.license == "AGPL-3.0-only" %}
  "License :: OSI Approved :: GNU Affero General Public License v3",
{%- elif cookiecutter.license == "AGPL-3.0-or-later" %}
  "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
{%- elif cookiecutter.license == "Apache-2.0" %}
  "License :: OSI Approved :: Apache Software License",
{%- elif cookiecutter.license == "BSD-3-Clause" %}
  "License :: OSI Approved :: BSD License",
{%- elif cookiecutter.license == "GPL-2.0-only" %}
  "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
{%- elif cookiecutter.license == "GPL-2.0-or-later" %}
  "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
{%- elif cookiecutter.license == "GPL-3.0-only" %}
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
{%- elif cookiecutter.license == "GPL-3.0-or-later" %}
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
{%- endif %}
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

[project.optional-dependencies]
dev = [
  "black",
  "coverage",
  "hatch",
  "isort",
  "mypy",
  "pylint",
  "sphinx",
  "twine",
  "wheel",
]

[project.urls]
Documentation = "http://{{cookiecutter.package_name}}.readthedocs.io"
"Source code" = "https://github.com/{{cookiecutter.github_user_name}}/{{cookiecutter.github_repo_name}}"

[tool.hatch.version]
path = "{{cookiecutter.package_name}}/__init__.py"

[tool.black]
line-length = 79

[tool.coverage.run]
branch = true
source = [
    "{{cookiecutter.package_name}}",
]

[tool.coverage.paths]
source = [
    "src/{{cookiecutter.package_name}}",
    "**/site-packages/{{cookiecutter.package_name}}",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.coverage.html]
title = "{{cookiecutter.package_name}} Coverage Test Report"
directory = "docs/source/_static/coverage"

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
# https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 79

[tool.mypy]
disallow_untyped_calls = true
disallow_untyped_defs = true
follow_imports = "skip"
no_implicit_optional = true
show_column_numbers = true
warn_no_return = true
