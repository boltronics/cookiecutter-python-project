[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{cookiecutter.package_name}}"
dynamic = ["version"]
description = "{{cookiecutter.package_short_description}}"
readme = "README.rst"
requires-python = ">= 3.11"
{%- if cookiecutter.license != "Not licensed for distribution (no license)" %}
license = "{{ cookiecutter.license }}"
{%- endif %}
dependencies = []
authors = [
  {name = "{{cookiecutter.full_name}}", email = "{{cookiecutter.email}}"},
]
keywords=[
  "{{cookiecutter.package_name}}"
]
classifiers = [
  "Development Status :: 2 - Pre-Alpha",
  "Intended Audience :: Developers",
{%- if cookiecutter.license == "Not licensed for distribution (no license)" %}
  "License :: Other/Proprietary License",
{%- elif cookiecutter.license == "AGPL-3.0-only" %}
  "License :: OSI Approved :: GNU Affero General Public License v3",
{%- elif cookiecutter.license == "AGPL-3.0-or-later" %}
  "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
{%- elif cookiecutter.license == "Apache-2.0" %}
  "License :: OSI Approved :: Apache Software License",
{%- elif cookiecutter.license == "BSD-3-Clause" %}
  "License :: OSI Approved :: BSD License",
{%- elif cookiecutter.license == "GPL-2.0-only" %}
  "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
{%- elif cookiecutter.license == "GPL-2.0-or-later" %}
  "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
{%- elif cookiecutter.license == "GPL-3.0-only" %}
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
{%- elif cookiecutter.license == "GPL-3.0-or-later" %}
  "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
{%- endif %}
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
]

[project.urls]
Documentation = "http://{{cookiecutter.package_name}}.readthedocs.io"
"Source code" = "https://github.com/{{cookiecutter.github_user_name}}/{{cookiecutter.github_repo_name}}"

[tool.hatch.build.targets.sdist]
only-include = [
  "/CHANGELOG.rst",
  "/README.rst",
  "/examples",
  "/pyproject.toml",
  "/src/{{cookiecutter.package_name}}/",
  "/tests",
{%- if cookiecutter.license != "Not licensed for distribution (no license)" %}
  "/{{ cookiecutter.license }}",
{%- endif %}
]

[tool.hatch.build.targets.wheel]
packages = ["src/{{cookiecutter.package_name}}"]

[tool.hatch.envs.hatch-test]
extra-dependencies = [
  "pytest",
]

[[tool.hatch.envs.hatch-test.matrix]]
python = ["3.11", "3.12", "3.13"]

[tool.hatch.envs.coverage]
extra-dependencies = [
  "coverage",
]

[tool.hatch.envs.coverage.scripts]
run-coverage-erase = "coverage erase"
run-coverage-tests = "coverage run -m unittest discover -s tests"
run-coverage = [
  "run-coverage-erase",
  "run-coverage-tests",
]
run-coverage-verbose = [
  "run-coverage-erase",
  "run-coverage-tests -v",
]
run-coverage-report = "coverage report"
run-coverage-html = "coverage html"
run-reports = [
  "run-coverage-report",
  "run-coverage-html",
]
run-new-reports = [
  "run-coverage",
  "run-reports",
]

[tool.hatch.envs.docs]
extra-dependencies = [
  "sphinx",
]

[tool.hatch.envs.docs.scripts]
build = [
  """
  rm -rf \
    docs/source/api/sitemap_generator*.rst \
    docs/source/api/modules.rst \
    docs/build/*
  """,
  "sphinx-build -M html docs/source docs/build",
]
build-dummy = [
  "sphinx-build -M dummy docs/source docs/build",
]

[tool.hatch.envs.lint]
extra-dependencies = [
  "pylint",
]

[tool.hatch.envs.lint.scripts]
check = "pylint src tests examples"

[tool.hatch.envs.style]
detached = true
extra-dependencies = [
  "black",
  "flake8",
  "isort",
]

[tool.hatch.envs.style.scripts]
run-flake8 = "flake8 --ignore=E203,W503 src tests"
run-isort = "isort src tests --profile black"
run-isort-check = "run-isort --check-only"
run-black = "black examples src tests"
run-black-check = "run-black --check"
check = [
  "run-isort-check",
  "run-black-check",
  "run-flake8",
]
format = [
  "run-isort",
  "run-black",
]

[tool.hatch.envs.types]
extra-dependencies = [
  "mypy",
]

[tool.hatch.envs.types.scripts]
check = "mypy src tests"

[tool.hatch.version]
path = "src/{{cookiecutter.package_name}}/__init__.py"

[tool.black]
line-length = 79

[tool.coverage.run]
branch = true
source = [
    "src",
]

[tool.coverage.paths]
source = [
    "src/{{cookiecutter.package_name}}",
    "**/site-packages/{{cookiecutter.package_name}}",
]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true

[tool.coverage.html]
title = "{{cookiecutter.package_name}} Coverage Test Report"
directory = "docs/source/_static/coverage"

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
# https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 79

[tool.mypy]
disallow_untyped_calls = true
disallow_untyped_defs = true
follow_imports = "skip"
no_implicit_optional = true
show_column_numbers = true
warn_no_return = true

[tool.pylint.REPORTS]
# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
output-format = "text"

# Tells whether to display a full report or only the messages.
reports = "no"

# Activate the evaluation score.
score = "yes"

[tool.pylint.LOGGING]
# Format style used to check logging format string. `old` means using %
# formatting, `new` is for `{}` formatting,and `fstr` is for f-strings.
logging-format-style = "old"

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = "logging"

[tool.pylint.VARIABLES]
# List of additional names supposed to be defined in builtins. Remember that
# you should avoid defining new builtins when possible.
additional-builtins = []

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = "yes"

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks = [
  "cb_",
  "_cb",
]

# A regular expression matching the name of dummy variables (i.e. expected to
# not be used).
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"

# Argument names that match this expression will be ignored. Default to name
# with leading underscore.
ignored-argument-names = "_.*|^ignored_|^unused_"

# Tells whether we should check for unused import in __init__ files.
init-import = "no"

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = [
  "six.moves",
  "past.builtins",
  "future.builtins",
  "builtins",
  "io",
]

[tool.pylint.FORMAT]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format = ""

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = '^\s*(# )?<?https?://\S+>?$'

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4

# String used as indentation unit. This is usually " " (4 spaces) or
# "\t" (1 tab).
indent-string = "    "

# Maximum number of characters on a single line.
max-line-length = 160

# Maximum number of lines in a module.
max-module-lines = 1000

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt = "no"

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt = "no"

[tool.pylint.BASIC]
# Naming style matching correct argument names.
argument-naming-style = "snake_case"

# Regular expression matching correct argument names. Overrides
# argument-naming-style.
#argument-rgx =

# Naming style matching correct attribute names.
attr-naming-style = "snake_case"

# Regular expression matching correct attribute names. Overrides
# attr-naming-style.
#attr-rgx =

# Bad variable names which should always be refused, separated by a comma.
bad-names = [
  "foo",
  "bar",
  "baz",
  "toto",
  "tutu",
  "tata",
]

# Naming style matching correct class attribute names.
class-attribute-naming-style = "any"

# Naming style matching correct class names.
class-naming-style = "PascalCase"

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length = -1

# Naming style matching correct function names.
function-naming-style = "snake_case"

# Good variable names which should always be accepted, separated by a comma.
good-names = [
  "i",
  "j",
  "k",
  "ex",
  "Run",
  "_",
]

# Include a hint for the correct naming format with invalid-name.
include-naming-hint = "no"

# Naming style matching correct inline iteration names.
inlinevar-naming-style = "any"

# Naming style matching correct method names.
method-naming-style = "snake_case"

# Naming style matching correct module names.
module-naming-style = "snake_case"

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties.
# These decorators are taken in consideration only for invalid-name.
property-classes = [
  "abc.abstractproperty",
]

# Naming style matching correct variable names.
variable-naming-style = "snake_case"

[tool.pylint.STRING]
# This flag controls whether the implicit-str-concat-in-sequence should
# generate a warning on implicit string concatenation in sequences defined over
# several lines.
check-str-concat-over-line-jumps = "no"

[tool.pylint.IMPORTS]
# List of modules that can be imported at any level, not just the top level
# one.
allow-any-import-level = []

# Allow wildcard imports from modules that define __all__.
allow-wildcard-with-all = "no"

# Analyse import fallback blocks. This can be used to support both Python 2 and
# 3 compatible code, which means that the block might have code that exists
# only in one or another interpreter, leading to false positives when analysed.
analyse-fallback-blocks = "no"

# Deprecated modules which should not be used, separated by a comma.
deprecated-modules = [
  "optparse",
  "tkinter.tix",
]

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled).
ext-import-graph = ""

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled).
import-graph = ""

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled).
int-import-graph = ""

# Force import order to recognize a module as part of the standard
# compatibility libraries.
known-standard-library = []

# Force import order to recognize a module as part of a third party library.
known-third-party = "enchant"

# Couples of modules and preferred modules, separated by a comma.
preferred-modules = []

[tool.pylint.CLASSES]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = [
  "__init__",
  "__new__",
  "setUp",
  "__post_init__",
]

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = [
  "_asdict",
  "_fields",
  "_replace",
  "_source",
  "_make",
]

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = [
  "cls",
]

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = [
  "cls",
]
